#set up workspace
rm(list=ls()) #make sure we start with a blank R environment
setwd("~/Desktop/CRISPR/R_CRISPR")

library(taxonomizr)
library(rBLAST)
library(ggplot2)

#makeblastdb creates a folder that contains a blast database like below
makeblastdb('~/Desktop/CRISPR/R_CRISPR/ZX.chrLev20200907.fasta', dbtype = "nucl") 
#This takes about 1hr

#prepare for a BLAST query
dna <- readDNAStringSet('SAG12seqs.fasta', format='fasta')
dna
bl <- blast(db="~/Desktop/CRISPR/R_CRISPR/ZX.chrLev20200907.fasta")
bl

#Run BLAST query
cl <- predict(bl, dna)
cl
cl[1:5,]
#to view first 5 hits
summary(cl)
#shows the top QueryID hits and other summary statistics 
#including percent identity, alignment length and mismatches. 

cl <- predict(bl, seq,
              BLAST_args = "-perc_identity 99",
              custom_format = "qseqid sseqid pident bitscore length stitle")
cl

#find the start codon
library(seqinr)
tablecode()

library("Biostrings")
s1 <- "ATAAGATGTGCTAGTTGGCGTCATGAATGTCAAAACGTAGTTTTGGTGTACACTGCTATAAATGGTGAAATCATATAGGGTTTCATCATTTAATACCAGCAATCACATGCAAAGATACCAACTTTGCTTGTGGGAGTTAAGGTACAAGGGAAGGTATCTGCATTATATATGCACATACAATAAACAAAACAATAAAGATGCTAGTGGTGGGAAAATGGTGGGGAGGGAGTTGTGGGATCTGGGGAGTGAGCTGTGAAGGATAAAAAGGAGAAAGAGAAGTTTTGCAAAGGGATCATGTCAAGCCATGTGAATTGTTTTGCATGCTCTAAGCTTTCTTTGCTTTGTCCCCAAACCATAGCCACATGTAGGGTAGTGTGTCTTTTCTACTTCTCTAGCTGCCTCACACAGCTTCTCGGCAACTTCCATCGCAATCGAAACTGGCCATCTCTGTTGTCTTAATTAATTAATCCGTCGAGTTTATAGGAAGCACTAATCATCCTTAGAAAGAGATGTTTAGGATATTATCTATATGATTGCTGCAGTCTGCAGTCTGCCAACTTTTCTATGATCAAGAATGTGGCCCATACTATCAGGCTCCTTCATGCACACAAAGTACTCCACTGAAAATGGCTTTGTGATGGGTTTGCAGGAGATAATGATTGTATTAAACTGTGTACACAGTATAGATCTACTGATTTTGTATATGGTTAAAGTGTGACAACATGGATTAAGTAGATTTTTAGATTGCTGGGTTGTCATGTTTCTCAATTAGAAAAGAAAAGAGAAAGAACTTGTGAGGAGAGACAATGGGAGGTGGTGAAAAGACTGGAATATGAATAATTAAAGGTCTGCTTTCCTGGCAACAACATGCAAGCATAATCTCTTTTATCCTATATAAATATATACATAGTTGATGTATTGGGCTTCTTTGGTCCCGAGTGAGCAAGGAGTATCTGTGGTCCTTCTCAAGCTTGATTTTAATGGTTGCCCACCAAATGATTTTGAATCAGGCCCTTTCCTCTTGGTTGGCCCTAGTATTAGCTGAAATTCTCATGGACCCAACCACAAGGCGAGCGGATTCTAATGTGGCAAAACACAAGCTTGAGGCTATGTATAGACTGTACGGACCAAAGTACCAAAGTCTGATAGACATGTTCCAGAAATTTGGGAGAGTACAAAAAACATGACCAGAGCATCACAGCTAAATCATGATTTAGTATTAGTGGTAAACTTCAATACGCATAGCCAGTTTGAATATGATGTTTTAATCACGCAACAGTCTGGTTTAAGAAGCCCAGATGCAGACCATCATCAGCAACACTGCCGCCAAGTGCTTGTAATGGACACAAGGCAGATGATTAGAACTGCTGGTTTGATTCTCATTAGTGCTTGCATTCTGTGGATGCCATCAAATGCATGGCTTGAAAACAGAAAGCCTCGAGCGTATGATGCCAGAGCCATGCAGGCGAGGTATGAGAGCTGGCTCAAAGCATATAGTCGGGAATATAAGAGTAGAGATGAATGGTTGCTGCGGTTTGGGATATATCAAACCAATGTGCAGTTCATCGAGTTTATCAACTCTCAGAACTTATCTTACAAGCTCACTGATAACAAATTTGCAGACATGACAAATGAGGAGTTCAAATCTCAGTTTCTTGGTCTTAATCCTCCAGGGAACAGTAACGTAAGTCATGAGGGGCAGGAAGACCCTTCTCACTTGCCAGAAAGTATAGATTGGAGAAAGGAAGGAGCTGTTACTCCTGTGAAGGATCAAGGCCTGTGTGGTAACAAAATTTTATCTTCTGTGTCTTTTTTTCTCATTTTCTTTGCCTAAAAAATTTGACGTATGGATGAGTAGAGTGCACTTTCTCCAGCTTTAAATGGATTTATCTTTTTGAGTGCAGCAAGTTGTTGGGCTTTCTCTGCTGTAGCAGCTGTGGAAGGCATCAACAAGATCAAGACCGGAAAATTGATCTCTTTGTCAGAACAAGAGCTTGTAGACTGTGACGTGCAGAGTGGTAATGAGGGTTGTAATGGTGGACTCATGGAGCCAGCGTTTGAATTCATTAAAAAGCATGGTGGGCTCACAACCGAAAGCGATTATCCTTACGTTGGGACTGAGAAAACCTGTAACAAAGCCAAGATGGAGAATCATGTTGTGTCCATAGATGGTTATAAACGAGTACCTCCCAATGATGAGAGTAGCCTGCAAGCTGCAGTTGCCAGGCAACCTGTCTCTGTTGCAGTTGATGGTGCTAGTATTGTGTTTCAGCTTTACGGCGGTGGCATCTTATCTGGCTTCTGCTTCATGGACCTCAATCATGCAGTAACAGCAGTTGGCTATGGGCAAAACAATGGCCATGAGTACTGGCTGATAAAAAACTCTTGGGGTGAAGACTGGGGAGAATCAGGGTATGCAAGGATGGAACGTGGCTCTTCTGATAAGAGAGGTACCTGTGGCATTGCCATGGACGCCAGCTACCCTATCAAGAATGAAAGTTAGCGCAATAAGATACACTTTAGATGGTGAATTGAGGGGAAGATGTTATTACTTACCACAAACCTGAACCCAGTAATAATTGCAATGTAAAGTAATCATCACTTTCTATGAAAAGGCATAATCAGAGATTTATCTTGAATCTTCACTTTTCAGATTTCATTTCCTGTATTTGTCCGTCTCCTGCTCAGCAATGAAATATACAAAATCATTTCCATTTACAAATTGGAAGATTTTATCTATAGGTAGCTATCAAAAATGTTTCAAATCAAGAGACAGATGCATTTCCAACATATAAGATACATTACTAATCTTTCCGGACTTCACATGGTACCCGTTAAGATAGACACTCTACCAACTTGACAAACTCTATTTACATCACCTGTCCCCTCAATCACCAAAATAGAAATGGCTGCATTACCTCAAGCTCAAAAGAATGGATTTACAGGAACTGATCATCCAAGGTTCTACCAAGTTAATTTCCATCAATCCCATTTCAAAATCCTTCCAGATAAATGCCAGTAAGTGTATGGCATTTTTTAGAGTGACTACTGATCTGCATGGAATAGTCAATCAACCAAAGAAGAAAACCAAGCAGAAAACCTTGCCTTTGGCTAACTCCTGCAAGCCCTCCAATTGAAAAAATAGTGCTCTAATGCAGGGAATCATGCACATAGCCAGATACTTAAAGTATCTCAAGAAAAGTGACGTTTATGATTACCGGTTCATTTACAGGCTCCCTCCTTTGTTGTGGTTTGTTGTGCATCTCAAACTACATACCATTAACTGTAAATATGAGGATGGTTCATATTTAAAGGAATGGAGAAATTGGCTAATTAGTACAGTGTATACAGAATAAGTGGTGTACAATAATGAACCCAAATCAAAGGCATTATGAATGAGTGACACAGGTTTAGCAGATGGTGATCAATTCCTCAGACACCTCTGAATTTAATCAAAGATGCTGTCCTGTGTATGATGAGTCCTTGGAACTTGCAGTGTAGCTCAATTTTCCAAGAGCATCACCCCGTGCAGTAAATTCTGTTTTCTTGAATCATCGCATTAGCTTGTGGTTCAGAAGTTTAACTGGAAAGATGAGGCATCTGAGTGTTTCATCAATGGATTCACATGTCAGTTTTTGTCAAAAGTTAAGCTTGAAGGAAGAACACCAAAGCCGGGGAGCTAGAGAATTAATGTGAACTATCTATTACTTGAAGCTTGTTTCTAGCAAACTTTTTGTCAAGCTCAACCAAAGGCTATACTTGAACAAGGAAGCAATTCACCAAGGAAATTCTGATGAGAGATGGCTCCAACATATCTGCAAGAATCTACAGTGAACGCAAGGGACAACAAGAATGCCCACCTAATCAAGCAAATTCAGCTGTGTAACTGAAGAAAACTACAAAAGAGTTGATGTCAACTTTTTTTTTTTTAAAAAAAAAGGATTTATAGGGAGCCAGAGTAGATATCTTCAATGATGGCGCCTTCTTTTAGACATGGCACACCTTCGGAAT"
matchPattern("ATG", s1) # Find all ATGs in the sequence s1


findPotentialStartsAndStops <- function(sequence)
{
  # Define a vector with the sequences of potential start and stop codons
  codons            <- c("ATG", "TAA", "TAG", "TGA")
  # Find the number of occurrences of each type of potential start or stop codon
  for (i in 1:4)
  {
    codon <- codons[i]
    # Find all occurrences of codon "codon" in sequence "sequence"
    occurrences <- matchPattern(codon, sequence)
    # Find the start positions of all occurrences of "codon" in sequence "sequence"
    codonpositions <- attr(occurrences,"start")
    # Find the total number of potential start and stop codons in sequence "sequence"
    numoccurrences <- length(codonpositions)
    if (i == 1)
    {
      # Make a copy of vector "codonpositions" called "positions"
      positions <- codonpositions
      # Make a vector "types" containing "numoccurrences" copies of "codon"
      types <- rep(codon, numoccurrences)
    }
    else
    {
      # Add the vector "codonpositions" to the end of vector "positions":
      positions   <- append(positions, codonpositions, after=length(positions))
      # Add the vector "rep(codon, numoccurrences)" to the end of vector "types":
      types       <- append(types, rep(codon, numoccurrences), after=length(types))
    }
  }
  # Sort the vectors "positions" and "types" in order of position along the input sequence:
  indices <- order(positions)
  positions <- positions[indices]
  types <- types[indices]
  # Return a list variable including vectors "positions" and "types":
  mylist <- list(positions,types)
  return(mylist)
}

S1 <- "ATAAGATGTGCTAGTTGGCGTCATGAATGTCAAAACGTAGTTTTGGTGTACACTGCTATAAATGGTGAAATCATATAGGGTTTCATCATTTAATACCAGCAATCACATGCAAAGATACCAACTTTGCTTGTGGGAGTTAAGGTACAAGGGAAGGTATCTGCATTATATATGCACATACAATAAACAAAACAATAAAGATGCTAGTGGTGGGAAAATGGTGGGGAGGGAGTTGTGGGATCTGGGGAGTGAGCTGTGAAGGATAAAAAGGAGAAAGAGAAGTTTTGCAAAGGGATCATGTCAAGCCATGTGAATTGTTTTGCATGCTCTAAGCTTTCTTTGCTTTGTCCCCAAACCATAGCCACATGTAGGGTAGTGTGTCTTTTCTACTTCTCTAGCTGCCTCACACAGCTTCTCGGCAACTTCCATCGCAATCGAAACTGGCCATCTCTGTTGTCTTAATTAATTAATCCGTCGAGTTTATAGGAAGCACTAATCATCCTTAGAAAGAGATGTTTAGGATATTATCTATATGATTGCTGCAGTCTGCAGTCTGCCAACTTTTCTATGATCAAGAATGTGGCCCATACTATCAGGCTCCTTCATGCACACAAAGTACTCCACTGAAAATGGCTTTGTGATGGGTTTGCAGGAGATAATGATTGTATTAAACTGTGTACACAGTATAGATCTACTGATTTTGTATATGGTTAAAGTGTGACAACATGGATTAAGTAGATTTTTAGATTGCTGGGTTGTCATGTTTCTCAATTAGAAAAGAAAAGAGAAAGAACTTGTGAGGAGAGACAATGGGAGGTGGTGAAAAGACTGGAATATGAATAATTAAAGGTCTGCTTTCCTGGCAACAACATGCAAGCATAATCTCTTTTATCCTATATAAATATATACATAGTTGATGTATTGGGCTTCTTTGGTCCCGAGTGAGCAAGGAGTATCTGTGGTCCTTCTCAAGCTTGATTTTAATGGTTGCCCACCAAATGATTTTGAATCAGGCCCTTTCCTCTTGGTTGGCCCTAGTATTAGCTGAAATTCTCATGGACCCAACCACAAGGCGAGCGGATTCTAATGTGGCAAAACACAAGCTTGAGGCTATGTATAGACTGTACGGACCAAAGTACCAAAGTCTGATAGACATGTTCCAGAAATTTGGGAGAGTACAAAAAACATGACCAGAGCATCACAGCTAAATCATGATTTAGTATTAGTGGTAAACTTCAATACGCATAGCCAGTTTGAATATGATGTTTTAATCACGCAACAGTCTGGTTTAAGAAGCCCAGATGCAGACCATCATCAGCAACACTGCCGCCAAGTGCTTGTAATGGACACAAGGCAGATGATTAGAACTGCTGGTTTGATTCTCATTAGTGCTTGCATTCTGTGGATGCCATCAAATGCATGGCTTGAAAACAGAAAGCCTCGAGCGTATGATGCCAGAGCCATGCAGGCGAGGTATGAGAGCTGGCTCAAAGCATATAGTCGGGAATATAAGAGTAGAGATGAATGGTTGCTGCGGTTTGGGATATATCAAACCAATGTGCAGTTCATCGAGTTTATCAACTCTCAGAACTTATCTTACAAGCTCACTGATAACAAATTTGCAGACATGACAAATGAGGAGTTCAAATCTCAGTTTCTTGGTCTTAATCCTCCAGGGAACAGTAACGTAAGTCATGAGGGGCAGGAAGACCCTTCTCACTTGCCAGAAAGTATAGATTGGAGAAAGGAAGGAGCTGTTACTCCTGTGAAGGATCAAGGCCTGTGTGGTAACAAAATTTTATCTTCTGTGTCTTTTTTTCTCATTTTCTTTGCCTAAAAAATTTGACGTATGGATGAGTAGAGTGCACTTTCTCCAGCTTTAAATGGATTTATCTTTTTGAGTGCAGCAAGTTGTTGGGCTTTCTCTGCTGTAGCAGCTGTGGAAGGCATCAACAAGATCAAGACCGGAAAATTGATCTCTTTGTCAGAACAAGAGCTTGTAGACTGTGACGTGCAGAGTGGTAATGAGGGTTGTAATGGTGGACTCATGGAGCCAGCGTTTGAATTCATTAAAAAGCATGGTGGGCTCACAACCGAAAGCGATTATCCTTACGTTGGGACTGAGAAAACCTGTAACAAAGCCAAGATGGAGAATCATGTTGTGTCCATAGATGGTTATAAACGAGTACCTCCCAATGATGAGAGTAGCCTGCAAGCTGCAGTTGCCAGGCAACCTGTCTCTGTTGCAGTTGATGGTGCTAGTATTGTGTTTCAGCTTTACGGCGGTGGCATCTTATCTGGCTTCTGCTTCATGGACCTCAATCATGCAGTAACAGCAGTTGGCTATGGGCAAAACAATGGCCATGAGTACTGGCTGATAAAAAACTCTTGGGGTGAAGACTGGGGAGAATCAGGGTATGCAAGGATGGAACGTGGCTCTTCTGATAAGAGAGGTACCTGTGGCATTGCCATGGACGCCAGCTACCCTATCAAGAATGAAAGTTAGCGCAATAAGATACACTTTAGATGGTGAATTGAGGGGAAGATGTTATTACTTACCACAAACCTGAACCCAGTAATAATTGCAATGTAAAGTAATCATCACTTTCTATGAAAAGGCATAATCAGAGATTTATCTTGAATCTTCACTTTTCAGATTTCATTTCCTGTATTTGTCCGTCTCCTGCTCAGCAATGAAATATACAAAATCATTTCCATTTACAAATTGGAAGATTTTATCTATAGGTAGCTATCAAAAATGTTTCAAATCAAGAGACAGATGCATTTCCAACATATAAGATACATTACTAATCTTTCCGGACTTCACATGGTACCCGTTAAGATAGACACTCTACCAACTTGACAAACTCTATTTACATCACCTGTCCCCTCAATCACCAAAATAGAAATGGCTGCATTACCTCAAGCTCAAAAGAATGGATTTACAGGAACTGATCATCCAAGGTTCTACCAAGTTAATTTCCATCAATCCCATTTCAAAATCCTTCCAGATAAATGCCAGTAAGTGTATGGCATTTTTTAGAGTGACTACTGATCTGCATGGAATAGTCAATCAACCAAAGAAGAAAACCAAGCAGAAAACCTTGCCTTTGGCTAACTCCTGCAAGCCCTCCAATTGAAAAAATAGTGCTCTAATGCAGGGAATCATGCACATAGCCAGATACTTAAAGTATCTCAAGAAAAGTGACGTTTATGATTACCGGTTCATTTACAGGCTCCCTCCTTTGTTGTGGTTTGTTGTGCATCTCAAACTACATACCATTAACTGTAAATATGAGGATGGTTCATATTTAAAGGAATGGAGAAATTGGCTAATTAGTACAGTGTATACAGAATAAGTGGTGTACAATAATGAACCCAAATCAAAGGCATTATGAATGAGTGACACAGGTTTAGCAGATGGTGATCAATTCCTCAGACACCTCTGAATTTAATCAAAGATGCTGTCCTGTGTATGATGAGTCCTTGGAACTTGCAGTGTAGCTCAATTTTCCAAGAGCATCACCCCGTGCAGTAAATTCTGTTTTCTTGAATCATCGCATTAGCTTGTGGTTCAGAAGTTTAACTGGAAAGATGAGGCATCTGAGTGTTTCATCAATGGATTCACATGTCAGTTTTTGTCAAAAGTTAAGCTTGAAGGAAGAACACCAAAGCCGGGGAGCTAGAGAATTAATGTGAACTATCTATTACTTGAAGCTTGTTTCTAGCAAACTTTTTGTCAAGCTCAACCAAAGGCTATACTTGAACAAGGAAGCAATTCACCAAGGAAATTCTGATGAGAGATGGCTCCAACATATCTGCAAGAATCTACAGTGAACGCAAGGGACAACAAGAATGCCCACCTAATCAAGCAAATTCAGCTGTGTAACTGAAGAAAACTACAAAAGAGTTGATGTCAACTTTTTTTTTTTTAAAAAAAAAGGATTTATAGGGAGCCAGAGTAGATATCTTCAATGATGGCGCCTTCTTTTAGACATGGCACACCTTCGGAAT"
findPotentialStartsAndStops(S1)
